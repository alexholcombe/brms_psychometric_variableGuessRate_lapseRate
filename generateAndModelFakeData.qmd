---
title: "exampleBrmsPsychometric"
format: html
editor: visual
---

## Load R libraries

This code initially based on <https://discourse.mc-stan.org/t/fitting-lapsing-psychometric-functions-with-brms/5762/2> .

```{r}
library(tidyverse)
library(brms)
```

## Generate a fake dataset

Generate a fake dataset.

```{r}
#| echo: false
set.seed(999)
chanceRate <- .02
lapse <- .03
numSs <- 3
conditionsAndIVs <- cross_df(list(speed = seq(-5, 5),
                     rep = seq(1, 5),
                     subj = seq(1, numSs)))
fakedata<- conditionsAndIVs
fakedata<- fakedata %>% mutate(
            probabilityCorrect = chanceRate + (1-chanceRate-lapse)*plogis(1 * (speed)) )

fakedata<- fakedata %>% mutate(
          correct = rbinom(n=length(probabilityCorrect), size = 1, prob = probabilityCorrect)
         )

fakedata$chanceRate <- chanceRate #Putting chanceRate in the brms formula, brms will know to look for chanceRate in the data dataframe
```

## Plot data

```{r}
#| echo: false
ggplot(fakedata, aes(x=speed,y=correct)) + 
  stat_summary( fun="mean", geom="point" ) +
  facet_wrap(.~subj)
```

## Set up the model 

```{r}
#| echo: false
#| 
# Set up formula model for fitting
myformula <- brms::brmsformula(
  correct ~ chanceRate + (1-chanceRate-lapse) * inv_logit(eta),
  eta ~ 1 + speed,
  lapse ~ 1, 
  family = bernoulli(link="identity"),
  nl = TRUE
) 

# Set up priors
lapse_rate_bounds <- c(0,.4)

mypriors <- c(
  brms::prior(student_t(7, 0, 10), class = "b", nlpar = "eta"),
  brms::prior(beta(1, 1), nlpar = "lapse", lb = 0, ub = .1)
)

# Plot priors
# not done yet

```

\*to-do: set chanceRate to 1/numobjects, and also check lapse parametrization

## Do the fit

```{r}
#! echo:false

fit2 <- brm(
  myformula,
  data = fakedata,
  init = 0,
  control = list(adapt_delta = 0.99),
  prior = mypriors,
)

print(fit2)
```

## Show fit

```{r}
predict_interval_brms <- predict(fit2, re_formula = NULL) #or use fitted to not take into account uncertainty of observations
#head(predict_interval_brms)
dataWithModelPredictions<- cbind(fakedata,predict_interval_brms)

ggplot(dataWithModelPredictions, aes(x=speed,y=correct)) + 
  stat_summary( fun="mean", geom="point" ) +
  geom_line( aes(x=speed, y= Estimate) ) +
  facet_wrap(.~subj)

```

In the above fit, I think it is overplotting the lines many times because there are multiple trials at each speed. So, should reduce the fakedata to unique values and then plot - and eventually interpolate to show smooth curves, and maybe annotate with lapse rate.

```{r}
conditionsEachTrial<- fakedata %>% select(speed,subj,chanceRate)
conditionsUniq <- unique(conditionsEachTrial)
prediction <- predict(fit2, newdata=conditionsUniq, re_formula = NULL) 
prediction<- fitted(fit2, newdata=conditionsUniq, re_formula = NULL) 

predictions<- cbind(conditionsUniq, prediction)
  
  
ggplot(dataWithModelPredictions, aes(x=speed,y=correct)) + 
  stat_summary( fun="mean", geom="point" ) +
  geom_line(data=predictions, aes(x=speed, y= Estimate) ) +
  geom_ribbon(data=predictions, aes(y=Estimate, ymin = Q2.5, ymax = Q97.5),
             alpha = .3, fill = "red") +
  facet_wrap(.~subj)
```

Why are Q2.7 and Q97.5 of predict always 0 and 1 but fitted is a continuous value? Maybe it is a consequence of predict not taking into account the uncertainty of the data.

## Resources

McElreath's Statistical Rethinking rewritten in brms and ggplot2 with multilevel models <https://bookdown.org/ajkurz/Statistical_Rethinking_recoded/multilevel-models.html#multilevel-posterior-predictions>

Cheat sheet especially for more advanced things: <https://michael-franke.github.io/Bayesian-Regression/practice-sheets/11a-cheat-sheet.html>

<https://cu-psych-computing.github.io/cu-psych-comp-tutorial/tutorials/r-extra/accelerated-ggplot2/ggplot_summer2018_part2/>

<https://kzee.github.io/PlotFixef_Demo.html#how-do-the-plots-using-lme4-and-brms-compare>

Next, we will use the `fitted()` function in `brms` to generate predictions and the 95% credibility interval. We will append these predicted values to our `mydatab` dataframe.

Note that `brms` features both a `fitted()` function and a `predict()` function, but they will return different information. The fitted line should be the same for both, but the credibility intervals differ. `fitted()` takes uncertainty of the estimation of the fitted line into account, whereas `predict()` takes into account both uncertainty about the estimation of the fitted line and uncertainty about the data. Thus, `predict()` in `brms` will yield a wider interval. `fitted()` closely matches the predicted interval we get from the `lmer()` model.
