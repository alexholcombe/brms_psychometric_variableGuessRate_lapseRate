---
title: "Visualize and select priors"
format: html
---

```{r}
#| warning: false 
#| output: false
#| echo: false 
rm(list = ls())
library(tidyverse)
library(brms)
library(here) #For finding root directory
```

# Selecting Priors

A prior distribution in Bayesian analysis will assign a probability to each possible value of a parameter. By specifying priors, brms takes into account not only the inputted data but also what is already known about the likelihood of certain parameter values to produce a more accurate estimation.

## Confusion of whether prior applies only to intercept or also to between-group coefficients

Have brms show me the syntax for priors for my model, by asking it for the default priors

```{r}
#| echo: true 

my_brms_formula <- brms::bf(
  correct ~ chance_rate + (1-chance_rate - lapseRate * (1-chance_rate))*Phi(-(speed-eta)/exp(logSigma)), 
  eta ~ lab + ageGroup, #+ numTargets,# + gender,
  lapseRate ~ 1, #~1 estimates intercept only
  logSigma ~ 1,#ageGroup,
  family = bernoulli(link="identity"), #Otherwise the default link 'logit' would be applied
  nl = TRUE #non-linear model
)

#Have to set up conditions for formula brms to pick up the groups
# which go into the possible priors returned by default_priors

source( here("R","simulate_data_no_underscores.R") )  #Load my needed custom function
numTargetsConds<- factor( c("three", "two"),
                         levels=c("three", "two") ) #This defines factor order. Worst is first.
numSubjects<- 25
trialsPerCondition<- 30#20
laboratories<- factor( c("Holcombe", "Roudaia"),
                         levels=c("Holcombe", "Roudaia") ) #This defines factor order

#Array of speeds (not very realistic because mostly controlled by a staircase in actual experiment)
speeds<-seq(.02,1.8, length.out = 12) # trials at 12 speeds between .02 and 1.8
trials <- generate_conditions(laboratories,numTargetsConds,numSubjects,trialsPerCondition,speeds)
#Add other columns used by the formula
trials <- trials %>%
  mutate(
    chance_rate = 1/obj_per_ring,
    correct = 1
  )

default_priors<-    brms::default_prior(my_brms_formula,
                          data = trials   )
print( default_priors )
```

#Looking at default_priors, it seems maybe I should specify coef="Intercept" for eta
# when I want the class to be Intercept.. 

### Trying to make prior on eta be specific to the Intercept, eta_Intercept

From brms documentation: In case of the default intercept parameterization (discussed in the 'Details' section of brmsformula), general priors on class "b" will not affect the intercept. Instead, the intercept has its own parameter class named "Intercept" and priors can thus be specified via set_prior("<prior>", class = "Intercept")


In an attempt to get eta_Intercept instead of Intercept_eta, that my changing class from "b" to "Intercept" did, try also specifying coef.

Wow, specifying both class as "b" and coef as "Intercept" resulted in "Intercept_eta_Intercept" inside brms!

` Error : The following priors do not correspond to any model parameter: 
<lower=0,upper=2.5> Intercept_eta_Intercept ~ uniform(0, 2.5) `

So try leaving class blank while keeping coef="Intercept", as that seems to be what puts "Intercept" before "eta".

That results in this error: 
` Error : Prior argument 'coef' may not be specified when using boundaries. `

So I dropped lb and ub.

That yields a warning because the uniform prior I set does have bounds, and brms doesn't like that discrepancy.

` Warning :It appears as if you have specified a lower bounded prior on a parameter that has no natural lower bound.
If this is really what you want, please specify argument 'lb' of 'set_prior' appropriately.
Warning occurred for prior 
b_eta_Intercept ~ uniform(0, 2.5) `

Final solution for an eta uniform prior only on the Intercept:

```{r}
#| echo: true
#brms can't evaluate parameters in the prior setting so one has to resort to sprintf-ing a string, if you want to set parameters dynamically
eta_param1<- 0
eta_param2<- 2.5
eta_prior_distribution<-  sprintf("uniform(%s, %s)", eta_param1, eta_param2)

brms::set_prior(eta_prior_distribution, 
                   coef="Intercept",
                   nlpar = "eta")
```

Try setting a prior on the ageGroupolder effect, because in one run it didn't converge and went crazy. We know for example it has to be between -2 and +2 at least!

```{r}
#| echo: true
#brms can't evaluate parameters in the prior setting so one has to resort to sprintf-ing a string, if you want to set parameters dynamically
eta_param1younger<- -2
eta_param2younger<- 2
eta_prior_distribution<-  sprintf("uniform(%s, %s)", 
                             eta_param1younger, eta_param2younger)

brms::set_prior(eta_prior_distribution, 
                   coef="ageGroupyounger",
                   nlpar = "eta")
```

## Prior on Lapse $(L)$

Since lapse is a rate, it is bounded between 0 and 1. We know from previous literature that a reasonable value of lapse is between 0.03 and 0.04.

As the tested population was reasonably well-motivated, high lapse valuables were unlikely, although not impossible. Therefore, we set a prior on lapse using a beta distribution that was bounded between 0 and 1 and a mode of 0.03.

```{r}
lapse_param1<- 2
lapse_param2<- 33.33
```

```{r}

prior_lapse <- tibble(
  x = seq(0, 1, length.out = 500),
  y = dbeta(x, lapse_param1, lapse_param2),
  parameter = "lapse"
)

ggplot(prior_lapse) + aes(x = x, y = y) +
  geom_area(fill = "red", alpha = 0.2) +
  geom_line()+
  theme_light() +
  labs(
    x = "",
    y = ""
  )
```

## Prior on Location $(\eta)$

We set a uniform prior for location with a lower bound of 0 and an upper bound of 2.5. The lower bound was set at 0 as you cannot have negative speedÂ . Holcombe and Chen (2013) found that even the best participant would have a speed threshold of less than 2.5 revolutions per second, even with only 2 distractors present in their array. Holcombe and Chen (2020) found that tracking of a single object on a mechanical display which is not confounded by a display's refresh rate still had a speed limit of 2.3 revolutions per second. Therefore, from previous research, an upper bound on speed threshold at 2.5 revolutions per second would be adequate to cover all participants.

```{r}
eta_param1<- 0
eta_param2<- 2.5
```

Brms allows setting lower and upper bounds on Intercept but not on coefficients. This means that if need to set a prior on coefficients (perhaps shouldn't need to do that, but I had trouble recently where simple ones blew up), may need to use a non-uniform (because brms may not play well with uniform without bounds specified, not sure), so also consider Gaussian for the difference between groups, between -1.5 and +1.5 difference in rps.

```{r}
#| echo: false 

prior_location <- tibble(
  x = seq(-1, 5, length.out = 500),
  y = dunif(x, eta_param1, eta_param2),
  parameter = "location"
)

prior_location_diff<-  dplyr::tibble(
    x = seq(-4, 5, length.out = 500),
    y = dnorm(x, eta_param1, eta_param2),
    parameter = "location diff (coef)"
)

# Combine all priors
priors_to_plot <- bind_rows(prior_location,prior_location_diff)

# Plot
ggplot(priors_to_plot, aes(x = x, y = y, color = parameter)) +
  geom_line() +
  theme_light() +
  labs(
    x = "Parameter value",
    y = "Density",
    color = "Parameter"
  ) + xlim(-4,4) +
  theme_bw() + 
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) #remove gridlines

```

## Prior on Sigma/Scale $(\sigma)$

Values of sigma can get extremely small and therefore tiny changes in the value of sigma can have significant effects, makeing it hard for brms to accurately estimate sigma. Therefore, our brms model is cast in terms of logsigma. We concluded that a sigma approximately between 0.05 and 5 would be a sufficient range to accommodate all participants based on looking at psychometric data from previous papers. Converting this with the log transform, we set a uniform prior on logsigma with a conservative lower and upper bound of -3 and 1.6 respectively.

```{r}
logsigma_param1<- -3
logsigma_param2<- 1.6
```


```{r}
#| echo: false 
lowerbound <- dplyr::tibble(
    speed = seq(0,2.5, length.out = 500),
    C = 0.25,
    L = 0.1, # for il
    eta = 0.9,
    sigma = 0.05,
    phi = pnorm(-speed, -eta, sigma), 
    probability_correct = C + (1-C - L*(1-C))*phi,
    upper_bound = 1 - L*(1-C)
)

upperbound <-dplyr::tibble(
    speed = seq(0,2.5, length.out = 500),
    C = 0.25,
    L = 0.1, # for il
    eta = 0.9,
    sigma = 5,
    phi = pnorm(-speed, -eta, sigma), 
    probability_correct = C + (1-C - L*(1-C))*phi,
    upper_bound = 1 - L*(1-C)
)

ggplot(lowerbound) + 
  geom_line(aes(x = speed, y = probability_correct)) +

  theme_light() +
  lims(x = c(0,2.5), y = c(0,1)) +
  labs(colour = "Legend",
       x = "Speed (revolutions per second)",
       y = "P(Correct)",
       title = "Logsigma=-3")

ggplot(upperbound) + 
  geom_line(aes(x = speed, y = probability_correct)) +

  theme_light() +
  lims(x = c(0,2.5), y = c(0,1)) +
  labs(colour = "Legend",
       x = "Speed (revolutions per second)",
       y = "P(Correct)",
       title = "Logsigma=1.6")
```

Figure 2: Example plots of psychometric function with a logsigma of either -3 or 1.6. The chance rate, eta and lapse are all consistent with the previous example.

```{r}
#| echo: false 
prior_scale <- tibble(
  x = seq(-5, 5, length.out = 500),
  y = dunif(x, logsigma_param1, logsigma_param2),
  parameter = "log(sigma)"
)

ggplot(prior_scale) + aes(x = x, y = y) +
  geom_area(fill = "red", alpha = 0.2) +
  geom_line() +
  theme_light() +
  labs(
    x = "",
    y = ""
  )
```

Plot them all together

```{r}
#| echo: false

# Create tibbles for each prior with a parameter label
prior_lapse<- prior_lapse |>
  mutate(y = y / max(y)) #Normalize so has peak of 1

prior_location<- prior_location |>
  mutate(y = y / max(y) * 0.95) #Normalize so has peak of 0.95 (to avoid overlap)

prior_location_diff<- prior_location_diff |>
  mutate(y = y / max(y) * 0.85) #Normalize so has peak of 0.95 (to avoid overlap)

prior_scale<- prior_scale |>
  mutate(y = y / max(y) * 0.92) #Normalize so has peak of 0.92 (to avoid overlap)


# Combine all priors
priors_to_plot <- bind_rows(prior_lapse, prior_location,
                            prior_location_diff, prior_scale)

# Plot
ggplot(priors_to_plot, aes(x = x, y = y, color = parameter)) +
  geom_line() +
  theme_light() +
  labs(
    x = "Parameter value",
    y = "Density",
    color = "Parameter"
  ) + xlim(-4,4) +
  theme_bw() + 
  theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()) #remove gridlines
```

Here is code you can use when calling brms:
```{r}
#brms can't evaluate parameters in the prior setting so one has to resort to sprintf-ing a string
# if you want to set the parameters dynamically
lapseRate_prior_distribution<- sprintf("beta(%s, %s)", lapse_param1, lapse_param2)

eta_prior_distribution<-  sprintf("uniform(%s, %s)", eta_param1, eta_param2)
eta_differences_prior_distribution<-  sprintf("gaussian(%s, %s)", eta_param1, eta_param2)

logsigma_prior_distribution<- sprintf("uniform(%s, %s)", logsigma_param1, logsigma_param2)


my_priors <- c(
   brms::set_prior(lapseRate_prior_distribution, class = "b", nlpar = "lapseRate", lb = 0, ub = 1),
   brms::set_prior(eta_prior_distribution, # class = "Intercept",
                   coef="Intercept",
                   nlpar = "eta"),#, lb = 0, ub = 2.5),
   brms::set_prior(logsigma_prior_distribution, class = "b", nlpar = "logSigma", lb = -2, ub = 1.6)
 )

```
