---
title: "Psychophysical model recovery using Bayesian brms"
format: html
---

TO-DO:

  - add change in psychometric function based on number of targets
  - Make it multilelvel, with multiple participants

To get started, we load the required packages.

```{r}
#| warning: false 
#| output: false
library(tidyverse)
library(brms)

source("../R/simulate_data.R") #Load my needed custom function
source("../R/psychometric_function.R") #Load my needed custom function

set.seed(999) #ensures reproducibility for testing
```

# Create simulated trials

Set up simulated experiment design.

```{r}
#| echo: true 
numSubjects<- 50
trialsPerCondition<- 8
targetNumConds<- c(2,3)
#Array of speeds (not very realistic because mostly controlled by a staircase in actual experiment)
speeds<-seq(.02,1.8, length.out = 12) # trials at 12 different speeds between .02 and 1.8

```

In order to build and test our model in brms, we must first create a simulated data set that is similar to our actual experiment data. This allows us to confirm the brms model is working and successfully recovers the parameters we set before applying it to our real experimental data that has unknown parameter values. In the actual data, there will be many group-wise differences in location and scale parameters. The following simulated data only has explicit differences between the $\eta$ (location) of the two age groups (older vs younger).


```{r}
#| echo: false 

trials <- generate_conditions_both_labs(numSubjects,trialsPerCondition,targetNumConds,speeds)

#Print number of unique values of each column
print('Number of values for each factor:')
numValsPerFactor<- trials |> summarise(across(everything(), ~ n_distinct(.))) |>
                              pivot_longer(everything())
print( numValsPerFactor )

```

Choose values for psychometric function for younger and older

```{r}
#| echo: true 
lapse <- 0.05
sigma <- 0.2
location_param_young_123targets <- c(1.5,0.91,0.6)
age_penalty <- 0.4 #Old people have worse limit by this much
gender_penalty <- 0
Holcombe_lab_penalty <- 0

#Using above parameters, need function to calculate a participant's location parameter
location_param_calculate<- function(num_targets,age_group,gender,lab) {
  
  base_location_param <- location_param_young_123targets[num_targets]
  after_penalties <- base_location_param - if_else(age_group=="older",1,0) * age_penalty -
                    if_else(lab=="Holcombe",1,0) * Holcombe_lab_penalty -
                    if_else(gender=="F",1,0) * gender_penalty
  return (after_penalties)
}
```

Using the psychometric function, simulate whether participant is correct on each trial or not, and 
add that to the simulated data, trials

```{r}
#| echo: false

data_simulated<- trials

#Add column for the probability of each trial being correct based on our psychometric function
#then use that to add column to generate if the subject got the trial correct
data_simulated <- data_simulated %>%
  mutate(
    chance_rate = 1/obj_per_ring,
    location_param = location_param_calculate(num_targets,age_group,gender,lab),
    p_correct = psychometric_function(1/obj_per_ring,lapse,speed,location_param,sigma),
    correct = rbinom(n=length(p_correct), size=1, prob=p_correct)
  )
        
```    
    
# Plot data

```{r}
#| echo: false

ggplot(data_simulated, aes(x=speed,y=p_correct,linetype=age_group,color=factor(num_targets))) +
  geom_point() + geom_line() +
  facet_grid(lab~obj_per_ring) +
  labs(x = "Speed (revolutions per second)",
        y = "P(Correct)",
        title = "Simulated data") +
  theme_bw()

    # geom_hline(aes(yintercept = upper_bound, colour = "Upper Bound"), linetype = "dashed") +
    # geom_hline(aes(yintercept = 0.25 , colour = "Lower Bound"), linetype = "dashed") +
    # geom_vline(aes(xintercept = 0.9, colour = "eta")) +
    # geom_line(aes(x = speed, y = probability_correct,
    #               colour = "Probability Correct")) +
    # theme_light() +
    # lims(x = c(0,2.5), y = c(0,1)) +
    # scale_colour_manual(values = c("Upper Bound" = "blue", "Lower Bound" = "red", "eta" = "yellow", "Probability Correct" = "black")) +

```  

#Convert these variables from vectors to factors
data_simulated <- data_simulated %>%
  mutate(
    gender = as_factor(gender),
    age_group = as_factor(age_group),
    lab = as_factor(lab),
    gender = as_factor(gender)
  ) 




# Setting up our Model in brms

Setting a model formula in brms allows the use of multilevel models, where there is a hierarchical structure in the data. But at this point we haven't made the model multi-level as we have been concentrating on the basics of brms.

The bf() function of brms allows the specification of a formula. The parameter can be defined by population effects, where the parameter's effect is fixed, or group level effects where the parameter varies with a variable such as age. The "family" argument is a description of the response distribution and link function that the model uses. For more detailed information on setting up a formula and the different arguments in BRMS see<https://paulbuerkner.com/brms/reference/brmsformula.html>

The model we used is based off our psychometric function used to generate the data mentioned previously. The only explicitly-coded difference in our simulated data is in the location parameter of older vs younger. Thus, in addition to the psychometric function, we allowed $\eta$ and $\log(\sigma)$ to vary by age group in the model. Because the psychometric function doesn't map onto a canonical link function, we use the non-linear estimation capability of brms rather than linear regression with a link function.

*Alex's note: Using the nonlinear option is also what allowed us to set a prior on the thresholds  $\eta$, because we could then parametrize the function in terms of the x-intercept, whereas with the link-function approach, we are stuck with the conventional parameterization of a line, which [has a term for the y-intercept but not the x-intercept](https://bsky.app/profile/did:plc:kynaetyuzsp46xejc6mzpjle/post/3lg5lpartzs2z) *


```{r}
my_formula <- brms::bf( 
   correct ~ chance_rate + (1-chance_rate - lapseRate*(1-chance_rate)) * Phi(-(speed-eta)/exp(logSigma))
  ) 
my_formula <- my_formula$formula
  
my_brms_formula <- brms::bf(
  correct ~ chance_rate + (1-chance_rate - lapseRate * (1-chance_rate))*Phi(-(speed-eta)/exp(logSigma)), 
  eta ~ age_group, 
  lapseRate ~ 1, #~1 means intercept only
  logSigma ~ age_group,
  family = bernoulli(link="identity"), #Otherwise the default link 'logit' would be applied
  nl = TRUE #non-linear model
)
```

# Set priors

See [visualize_and_select_priors.html](visualize_and_select_priors.html) for some motivation and visualisation.

```{r}
#| echo: true 

my_priors <- c(
  brms::set_prior("beta(2,33.33)", class = "b", nlpar = "lapseRate", lb = 0, ub = 1),
  brms::set_prior("uniform(0, 2.5)", class = "b", nlpar = "eta", lb = 0, ub = 2.5),
  brms::set_prior("uniform(-3, 1.6)", class = "b", nlpar = "logSigma", lb = -2, ub = 1.6) 
)

```

# Fitting Model to Simulated Data

Fitting the model gives an estimation of the average parameter value of the participants. The brm() function is used to fit the model based on the given formula, data and priors. Other arguments of brm can adjust the model fitting in various ways, for more information on each of the arguments see <https://paulbuerkner.com/brms/reference/brm.html>

```{r}
#| echo: false 

fit <- try( brm(
  my_brms_formula,
  data = data_simulated,
  prior = my_priors,
  silent = 0, #prints more detailed messages (helps debug)
  init = 0, #starting at
  chains = 4, # the more chains, the greater convergence in the model
  cores = 4, #how many parallel processes, speeds up model 
  iter = 2000, #default number of iterations 
  threads = threading(2) #how many cores work per chain
  ), silent=FALSE
)

if (inherits(fit, "try-error")) {
  message("An error occurred!")
} else {
  print('No errors when fitting.') #print(result)
}

summary(fit)
```

Check how close the fit estimates are to the true parameters.
```{r}
#| echo: false 

#Grab the estimates column of the parameter estimates
estimates<- as.data.frame( fixef(fit) )

#Create corresponding true values dataframe, to compare
trueVal_eta_young <- mean(location_param_young_123targets[2:3])
trueValsNamesInBrmParlance<-
  c("eta_Intercept","eta_age_groupyounger","lapseRate_Intercept","logSigma_Intercept","logSigma_age_groupyonger")
trueVal<-c( 
     trueVal_eta_young - age_penalty, age_penalty, lapse, log(sigma), 0)
trueVal<- data.frame(trueVal)
rownames(trueVal) <- trueValsNamesInBrmParlance

estimates <- merge(estimates, trueVal, by = "row.names", sort=FALSE)
#Move trueVals column to second column so next to Estimate
estimates <- estimates %>% select(1, trueVal, everything())

estimates <- estimates %>%
  mutate(discrepancy = trueVal - Estimate, .after = Estimate)

#pretty print
estimates %>% dplyr::mutate(across(where(is.numeric), ~ round(.x, 2)))
```

The fit converged with no errors!! :grinning: (this doesn't always happen, when for example we use more complicated models)

 The eta_age \_groupyounger represents the eta advantage for the younger age group. 
 eta_intercept is the eta for the older group
 
The logSigma estimate tends to have wide confidence intervals.

The fitted model's estimated of the parameters are close to those used to generate the simulated data, meaning the model recovery was a success!!

# Model Improvements

Although we have learned a lot and made significant progress over the course of 6 weeks, there is still work to be done and errors we are running into in our model recovery. In particular, when we alter the simulated data and model fit to include group-level effects for variables such as number of targets or objects per ring, the estimations are very inaccurate. We also have yet to test changes to group level values of sigma and are unsure whether the lapse rate may have a group effect for various conditions or population groups.

Another key area to look into is the brms syntax and fitting for nested variables to create a multilevel model. brms allows nesting of variables using parameter \* (1 \| nested group) \*, but have not yet researched this or added it to our model.
