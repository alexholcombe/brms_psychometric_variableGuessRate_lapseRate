---
title: "ChertverikovProbitBRMS"
format: html
editor: visual
---



This code does it in a way that allows him to set a prior on the location parameter: https://gist.github.com/achetverikov/b1756dc06e04a55b70e888cd2c2719f5

## Quarto



```{r}
#| echo: false
library(data.table)
library(brms)
library(tidyverse)
```



Why does he use cmdstanr?



```{r}
#library(cmdstanr)
#set_cmdstan_path('//wsl$/Ubuntu/home/andche/.cmdstan/cmdstan-2.35.0')

```



## New psychometric function



```{r}
location_parameter_data <-
  tidyr::expand_grid(
    age_group = c("younger","older"),
    obj_per_ring = c(5,10)
  )

location_parameter_data <- location_parameter_data %>%
  mutate(
    location = c()
  )

```

```{r}
#| echo: false
set.seed(999)

#making a dataframe of every variable combination to reflect the differing locations for age x obj_per_ring x num_target



location_parameter_younger <- 0.91
scale_parameter_younger <- 0.2

location_parameter_older <- 0.50
scale_parameter_older <- 0.2

lapse <- 0.03

num_subj <- 4

#generate fake data
fakedata2 <- tidyr::expand_grid(
    speed = seq(.02,1.8, length.out = 12), #changed min and max speed to match our data
    subj = seq(1, num_subj),
    num_target = c(1,2,3),
    obj_per_ring = c(5,10), #two conditions for object density
    rep = seq(1,5) #5 replicants of each trial combination
  )

fakedata2 <- fakedata2 %>%
  group_by(subj) %>%
  mutate(
    gender = sample(c("M","F"), 1, replace = TRUE),
    age_group = sample(c("younger", "older"), 1, replace = TRUE),
    lab = sample(c("rf", "holcombe"), 1, replace = TRUE)
  ) %>%
  ungroup()

fakedata2 <- fakedata2 %>%
  mutate(
    responseRing = sample(c("inner", "middle", "outer"), n(), replace = TRUE)
  )

fakedata2 <- fakedata2 %>%
  mutate(
    chance_rate = 1/obj_per_ring,
    phi = ifelse(age_group == "younger",
                 pnorm(-speed, -location_parameter_younger, scale_parameter_younger),
                 pnorm(-speed, -location_parameter_older, scale_parameter_older)),
    probabilityCorrect = chance_rate + (1-chance_rate - lapse*(1-chance_rate))*phi
  )

fakedata2 <- fakedata2 %>% mutate(
          correct = rbinom(n=length(probabilityCorrect), size = 1, prob = probabilityCorrect)
         )
          
```



## Plot our fake data



```{r}
#| echo: false
ggplot(fakedata2, aes(x=speed,y=correct, colour = gender, shape = age_group)) + 
  stat_summary( fun="mean", geom="point" ) +
  facet_wrap(.~subj)

ggplot(fakedata2, aes(x=speed,y=correct)) + 
  stat_summary(fun="mean", geom="point" ) +
  facet_wrap(.~chance_rate) +
  aes(color = chance_rate)

ggplot(fakedata2, aes(x=speed,y=correct)) + 
  stat_summary(fun="mean", geom="point" ) +
  facet_wrap(.~age_group) +
  aes(color = age_group)
```

```{r}
#| echo: false

distr_fun <- function(x, mean, sigma, lapse, chance_rate){
(lapse*chance_rate) + (1 - lapse)*(1 - pnorm((x-mean)/sigma)*(1-chance_rate))
}
                                 
#Phi = cumulative normal, internal to brms. Why do we use this instead of pnorm?
#We are usingg the parameterization of psychometric function with chanceRate and lapse rate
model_formula <- bf(
  correct ~ chance_rate + (1-chance_rate - lapse*(1-chance_rate))*Phi(-(speed-eta)/exp(logsigma)),
  eta ~ age_group + lab,
  lapse ~ age_group + lab,
  logsigma ~ age_group + lab,
  family = bernoulli(link="identity"), #because otherwise default link logit would be used
  nl = TRUE
)

# Can all of these be used as priors? https://paulbuerkner.com/brms/reference/brmsfamily.html
p3 <- c(
  set_prior("beta(2,33.33)", class = "b", nlpar = "lapse", lb = 0, ub = 1),
  set_prior("uniform(0, 2.5)", class = "b", nlpar = "eta", lb = 0, ub = 2.5) #conservative ub of 3 rps
)


# look through https://mc-stan.org/docs/functions-reference/unbounded_continuous_distributions.html
p4 <- c(
  set_prior("exp_mod_normal(0, 1, 1)", class = "b", nlpar = "lapse", lb = 0, ub = 1),
  set_prior("uniform(0, 3)", class = "b", nlpar = "eta", lb = 0, ub = 3) #conservative ub of 3 rps
)

default_prior(model_formula, fakedata2)
```

```{r}
#| echo: false

fit <- brm(
  model_formula,
  data = fakedata2, 
  #control = list(adapt_delta = 0.99),
  prior = p3
)

summary(fit)

pp_check(fit)
```

```{r}
brms::pp_check(fit)
```

```{r}
#| echo: false

#since we have effectively two different conditions numerically (chance_rate 0.1 and 0.2), treating it as one model probably not the move

fakedata2_pred <- fakedata2
coefs <- fixef(fit)[,'Estimate']
fakedata2_pred[,pred=pnorm((speed-coefs['eta_Intercept'])/exp(coefs['logsigma_Intercept']))]
fakedata2_pred <- cbind(fakedata2_pred, predict(fit, newdata = fakedata2))

fakedata2_pred

ggplot(fakedata2, aes(x = speed, y = correct))+
  stat_summary(fun="mean", geom="point", aes(color = 'Data') )+
  stat_function(fun = distr_fun, args = list(mean = location_parameter, sigma = scale_parameter, lapse = lapse, chance_rate = 0.2), aes(color = '0.2 chance curve')) +
    stat_function(fun = distr_fun, args = list(mean = location_parameter, sigma = scale_parameter, lapse = lapse, chance_rate = 0.1), aes(color = '0.1 chance curve'))+
  geom_line(data=fakedata2_pred, aes(y = Estimate, color = 'Fitted model with uncertainty'))
```

