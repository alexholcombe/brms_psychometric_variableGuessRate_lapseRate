---
title: "ChertverikovProbitBRMS"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

This code does it in a way that allows him to set a prior on the location parameter: https://gist.github.com/achetverikov/b1756dc06e04a55b70e888cd2c2719f5

## Packages

```{r}
#| echo: false
library(data.table)
library(brms)
library(tidyverse)
```

## Setting condition-wise location parameters

```{r}
location_parameter_data <-
  tidyr::expand_grid(
    age_group = c("younger","older"),
    obj_per_ring = c(4,5,8,10),
    num_target = c(2,3)
  )

location_parameter_data <- location_parameter_data %>%
  mutate(
    location = c(1.0,0.8,0.9,0.7,0.6,0.5,0.5,0.4, # younger
                 0.8,0.6,0.7,0.5,0.4,0.2,0.3,0.1) # older
  )

```

### Differences in location parameters averaged over group

```{r}
location_parameter_data %>%
  group_by(num_target) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))

location_parameter_data %>%
  group_by(obj_per_ring) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))

location_parameter_data %>%
  group_by(age_group) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))
```

## Generate data, including based on the location parameter matrix

```{r}
#| echo: false
set.seed(999)

lapse <- 0.03
num_subj <- 90
sigma <- 0.2

#generate fake data
fakedata2 <- tidyr::expand_grid(
    subj = seq(1, num_subj),
    rep = seq(1,5), #5 replicants of each trial combination
    num_target = c(2,3),
    speed = seq(.02,1.8, length.out = 12) #12 different speeds between .02 and 1.8
  )

fakedata2 <- fakedata2 %>%
  group_by(subj) %>%
  mutate(
    gender = sample(c("M","F"), 1, replace = TRUE),
    age_group = sample(c("younger", "older"), 1, replace = TRUE),
    lab = sample(c("rf", "holcombe"), 1, replace = TRUE)
  ) %>%
  ungroup()

fakedata2 <- fakedata2 %>%
  mutate(
    obj_per_ring = case_when(
      lab == "rf" ~ sample(c(5,10), n(), replace=TRUE),
      lab == "holcombe" ~ sample(c(4,8), n(), replace = TRUE)
    )
  )

fakedata2 <- fakedata2 %>%
  mutate(
    response_ring = sample(c("inner", "middle", "outer"), n(), replace = TRUE)
  ) 

fakedata2 <- fakedata2 %>%
  left_join(location_parameter_data, by = c("age_group", "obj_per_ring", "num_target")
  )

fakedata2 <- fakedata2 %>%
  mutate(
    chance_rate = 1/obj_per_ring,
    phi = pnorm(-speed, -location, sigma),
    probability_correct = chance_rate + (1-chance_rate - lapse*(1-chance_rate))*phi,
    correct = rbinom(n=length(probability_correct), size = 1, prob = probability_correct)
  )

fakedata2 <- fakedata2 %>%
  mutate(
    gender = as_factor(gender),
    age_group = as_factor(age_group),
    lab = as_factor(lab),
    gender = as_factor(gender),
    response_ring = as_factor(response_ring)
  ) 

glimpse(fakedata2)

```

### Differences in location parameters averaged over group (ACTUAL DATA)

```{r}
fakedata2 %>%
  group_by(num_target) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))

fakedata2 %>%
  group_by(obj_per_ring) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))

fakedata2 %>%
  group_by(age_group) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))

fakedata2 %>%
  group_by(lab) %>%
  summarize(mean_location = mean(location, na.rm = TRUE))
```

## Plot our fake data

```{r}
#| echo: false
ggplot(fakedata2, aes(x=speed,y=correct, colour = gender, shape = age_group)) + 
  stat_summary( fun="mean", geom="point" ) +
  facet_wrap(.~subj)

ggplot(fakedata2, aes(x=speed,y=correct)) + 
  stat_summary(fun="mean", geom="point" ) +
  facet_wrap(.~chance_rate) +
  aes(color = chance_rate)

ggplot(fakedata2, aes(x=speed,y=correct)) + 
  stat_summary(fun="mean", geom="point" ) +
  facet_wrap(.~age_group) +
  aes(color = age_group)

ggplot(fakedata2, aes(x=speed,y=correct)) + 
  stat_summary(fun="mean", geom="point" ) +
  facet_wrap(.~num_target) +
  aes(color = num_target)

ggplot(fakedata2, aes(x=speed,y=correct)) + 
  stat_summary(fun="mean", geom="point" ) +
  facet_wrap(.~obj_per_ring) +
  aes(color = obj_per_ring)


```

```{r}
#| echo: false

model_formula <- bf(
  correct ~ chance_rate + (1-chance_rate - lapse*(1-chance_rate))*Phi(-(speed-eta)/exp(logsigma)),
  eta ~ age_group + lab + num_target,
  lapse ~ 1,
  logsigma ~ age_group + lab + num_target,
  family = bernoulli(link="identity"), #because otherwise default link logit would be used
  nl = TRUE
)

# https://paulbuerkner.com/brms/reference/brmsfamily.html
# https://mc-stan.org/docs/functions-reference/unbounded_continuous_distributions.html
prior1 <- c(
  set_prior("beta(2,33.33)", class = "b", nlpar = "lapse", lb = 0, ub = 1),
  set_prior("uniform(0, 2.5)", class = "b", nlpar = "eta", lb = 0, ub = 2.5), #conservative ub of 2.5 rps
  set_prior("uniform(-3, 1.6)", class = "b", nlpar = "logsigma", lb = -2, ub = 1.6) #conservative ub of 1.6
)

default_prior(model_formula, fakedata2)
```

```{r}
#| echo: false

#within chain parallelization and between chain paralellization
#threads = how many cores per chain
#cores = how many parrallel processes  (make it equal to the number of chains)
fit <- brm(
  model_formula,
  data = fakedata2,
  #control = list(adapt_delta = 0.99),
  prior = prior1,
  silent = 0,
  init = 0,
  chains = 4,
  cores = 4,
  iter = 2000, #default iterations (if errors come up in convergence, can increase this)
  threads = threading(2)
)

summary(fit)
```
