---
title: "ChertverikovProbitBRMS"
format: html
editor: visual
---

This code does it in a way that allows him to set a prior on the location parameter: https://gist.github.com/achetverikov/b1756dc06e04a55b70e888cd2c2719f5

## Quarto

```{r}
#| echo: false

library(ggplot2)
library(data.table)
library(brms)
library(tidyverse)
```

Why does he use cmdstanr?

```{r}
#library(cmdstanr)
#set_cmdstan_path('//wsl$/Ubuntu/home/andche/.cmdstan/cmdstan-2.35.0')

```

## Our fake data

```{r}
#| echo: false

set.seed(999)
lapse<- 0 # will change after trying the data will work
numSs<- 3 # subject number small so brms loads quick

location_parameter <- 1 #where on the x-axis (speed) does the y axis reach 50%
scale_parameter <- 0.2 

conditionsAndIVs <- 
  tidyr::expand_grid(
    speed = seq(.02,1.8, length.out = 11), 
    rep = seq(1, 50),
    subj = seq(1, numSs)
  )
# need to add differing objects per ring and number or targets, kept it simple for now to see if the analysis works first

ourfakedata<- conditionsAndIVs

ourfakedata$chanceRate <- 0 #TEMP

#new column for probability correct using logistic function

##using logistic function
#ourfakedata<- ourfakedata %>% mutate(
 # probabilityCorrect = chanceRate + (1-chanceRate-lapse)*(1-plogis(speed, location = location_parameter, scale = scale_parameter))
#)
 ##alternatively use cumulative normal (pnorm function)
ourfakedata<- ourfakedata %>% mutate(
  probabilityCorrect = chanceRate + (1-chanceRate-lapse)*(1-pnorm(speed, mean = location_parameter, sd = scale_parameter))
)

#generate binary responses
ourfakedata <- ourfakedata %>% mutate(
          correct = rbinom(n=length(probabilityCorrect), size = 1, prob = probabilityCorrect))



ourfakedata
          
```

## Plot our fake data

```{r}
#| echo: false
ggplot(ourfakedata, aes(x=speed,y=correct)) + 
  geom_point() +
  stat_summary( fun="mean", geom="point" ,color="blue") +
  facet_wrap(.~subj)
```

```{r}
#| echo: false

distr_fun_std <- function(x, mean, sigma, lambda){
  lambda+(1-2*lambda) * pnorm((x- mean)/sigma)
}

real_mean <- 50
real_sigma <- 50

##chertverikovs data
#exdata <- data.table(expand.grid(delay_ms = seq(-300,300, by = 10), repl_i = 1:100))
#exdata[,fixated_right := ifelse(rnorm(.N, delay_ms-real_mean, sd = real_sigma)>0, 1, 0), by = delay_ms]


model_formula <- bf(
  correct ~ Phi((speed-eta)/exp(sigma)), #replaced delay_ms with speed to match our data
  eta ~ 1,
  sigma ~ 1,
  family = bernoulli(link="identity"), #because otherwise default link logit would be used
  nl = TRUE
)

#log_sigma_mean <- log(50)
#sigma_lb <- 0.01
#sigma_ub <- 200

p2 <- c(
  prior(normal(100, 100), coef = "Intercept",  nlpar = "eta"),
  #prior(constant(3.91), class = "b", nlpar = "sigma", lb=3.8, ub=4.0),
  prior(normal(4,2), class = "b", nlpar = "sigma", lb=0.1, ub=2) #changed from 1 and 6 to reflect what our scale/signma should be 
#  prior(beta(1,1), class = "b", nlpar = "sigma", lb=3.8, ub=4.0)
)

default_prior(model_formula, ourfakedata)
```

```{r}
#| echo: false

fit <- brm(
  model_formula,
  data = ourfakedata, 
  # control = list(adapt_delta = 0.99),
  prior = p2,
#  cores = 4,
#  backend = "cmdstanr",
#  sample_prior = "only" #draws are drawn solely from the priors ignoring the likelihood
)
summary(fit)


```

```{r}
#| echo: false
#just edited this section by swapping out exdata, delay and fixated right labells to reflect ourfakedata- did not edit equations or anything so may not be reflective of our data
coefs <- fixef(fit)[,'Estimate']
pred_df <-  data.table(speed = seq(-50,50, by = 10)) #edited speed from -200,200 to -50,50
pred_df[,pred:=pnorm((speed-coefs['eta_Intercept'])/exp(coefs['sigma_Intercept']))]
pred_df <- cbind(pred_df, predict(fit, newdata = pred_df ))
ggplot(ourfakedata, aes(x = speed, y = correct))+
  stat_summary( fun="mean", geom="point", aes(color = 'Data') )+
  stat_function(fun = distr_fun_std, args = list(mean = real_mean, sigma = real_sigma, lambda = 0), aes(color = 'Generating model'))+
  geom_line(data=pred_df, aes(y = Estimate, color = 'Fitted model with uncertainty'))+
  geom_line(data=pred_df, aes(y = pred, color = 'Fitted model'))
```
