---
title: "DenisonBlog"
format: html
---

#Title Here

```{r}
library(tidyverse)
library(brms)

```

```{r}
#| echo: false
set.seed(999) #ensures reproducible response for testing

#Set arbitrary/known values for parameters
lapse <- 0.03
sigma <- 0.2
location_parameter_younger <-0.91 
location_parameter_older <-0.5 #differing location parameter by age to test if our model is able to detect group differences

#generate data frame for simulated data
fakedata <- tidyr::expand_grid(
    subj = seq(1, 50), #number of subjects
    rep = seq(1,5), #replicants of each trial combination
    num_target = c(2,3), #number of targets particpant tracks
    speed = seq(.02,1.8, length.out = 12) # trials at 12 different speeds between .02 and 1.8
  )
#note: Holcombe lab's experiment had both a set number of trials at certain speeds and a speed staircase. Rodaia and Faubert (2017) had a set number of trails at certain intervals based on benchmark speeds and then a Bayesian adaptive procedure for the rest of the trials.

#Introducing demographic data and seperating the two labs
fakedata <- fakedata %>%
  group_by(subj) %>%
  mutate(
    gender = sample(c("M","F"), 1, replace = TRUE),
    age_group = sample(c("younger", "older"), 1, replace = TRUE),
    lab = sample(c("rf", "holcombe"), 1, replace = TRUE) 
  ) %>%
  ungroup()

# Splitting number of objects per ring based on lab
fakedata <- fakedata %>%
  mutate(
    obj_per_ring = case_when(
      lab == "rf" ~ sample(c(5,10), n(), replace=TRUE), #Rodaia and Faubert (2017) tested only 5 and 10 objects per ring
      lab == "holcombe" ~ sample(c(4,8), n(), replace = TRUE) #Holcombes lab tested only 4 and 8 objects per ring
    )
  )

#removed prompted ring for response from data


fakedata <- fakedata %>%
  mutate(
    chance_rate = 1/obj_per_ring,
    phi = ifelse(age_group == "younger",
                 pnorm(-speed, -location_parameter_younger, sigma),
                 pnorm(-speed, -location_parameter_older, sigma)),
    probability_correct = chance_rate + (1-chance_rate - lapse*(1-chance_rate))*phi,
    correct = rbinom(n=length(probability_correct), size = 1, prob = probability_correct)
  )

#Convert these variables from vectors to factors
fakedata <- fakedata %>%
  mutate(
    gender = as_factor(gender),
    age_group = as_factor(age_group),
    lab = as_factor(lab),
    gender = as_factor(gender)
  ) 

glimpse(fakedata)

```

# Psychometric Function

The data is generated based on our psychometric function for the sake of model recovery. Using (citation) we obtained the function

$$
P(\text{Correct}) =C+(1-C-L(1-C)) \times\Phi\bigg(\frac{-(X-\eta)}{\sigma}\bigg) 
$$

**Where**

-   $C$ is the chance rate of selecting the correct target (i.e. $\frac{1}{\text{# objects}}$) and represents a lower boundary of the function.

-   $L$ is the lapse rate parameter (i.e. the rate at which participants fail due to lapses in attention) and is included in the calculation of the upper boundary of the function.

-   $X$ is the speed in which objects move in a trial (RPS)

-   $\eta$ is the location parameter, representative of the $X$ in which $P(\text{Correct})$ is halfway between the upper boundary $(1-L(1-C))$ and lower boundary $C$ of the function.

-   $\sigma$ represents the scale parameter, representative of the shape/steepness about $\eta$. (We later use $\log(\sigma)$ for numerical stability in the model.)

**Note:**

-   We take the negative of $(X-\eta)$ in $\Phi\bigg(\frac{-(X-\eta)}{\sigma}\bigg)$ is taken in order to reflect the function (as speed increases, $P(\text{Correct})$ decreases)

-   The support of the function itself is $(-\infty,\infty)$ but speed is always positive. The model is not technically accurate but still useful with the right parameters.

## Example of the function (for illustrative purposes)

Here we have an example in which

-   $C=1/4$

-   $L = 0.1$

-   $\eta = 0.9$

-   $\sigma = 0.2$

```{r}
example <- dplyr::tibble(
    speed = seq(0,2.5, length.out = 500),
    C = 0.25,
    L = 0.1, # for il
    eta = 0.9,
    sigma = 0.2,
    phi = pnorm(-speed, -eta, sigma),
    probability_correct = C + (1-C - L*(1-C))*phi,
    upper_bound = 1 - L*(1-C)
)

ggplot(example) + aes(x = speed, y = probability_correct) +
  geom_hline(yintercept = example$upper_bound, colour = "blue", linetype = "dashed") +
  geom_hline(yintercept = 0.25 , colour = "red", linetype = "dashed") +
  geom_line() +
  lims(x = c(0,2.5), y = c(0,1)) +
  theme_linedraw()
  


```

# Acknowledgements

-   Extensive use of Microsoft Copilot
